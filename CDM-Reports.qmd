---
title: "CDM Reports"
author: "Alvin, Lin"
date: "`r Sys.Date()`"
date-format: full
execute:
  echo: false
  warning: false
  keep-md: true
---

<!-- EDC \\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-22225 -->

<!-- \\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-22225\SE30_Glu\OpenClinica\Current -->

```{r}
#| label: Libaray Packages 
suppressPackageStartupMessages({
  library(tidyverse)
  library(fs)
  library(haven)
  library(openxlsx)
})
```

```{r}
#| label: User-defined path
path <- readline("Please paste the directory: ")
```

```{r}
#| label: Directory
edc_path <- dir_ls(gsub("\\\\", "/",path), recurse = F, regexp = ".sas7bdat$") |> 
            path_filter(regexp = "Archive|Map|metadata|previous", invert = T, ignore.case = T)
```

```{r}
#| label: List of EDC Data 225
# edc_path <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-22225\SE30_Glu\OpenClinica\Current)"), recurse = F, regexp = ".sas7bdat$") |> 
#              path_filter(regexp = "Archive|Map|metadata|previous", invert = T, ignore.case = T)
```

```{r}
#| label: List of EDC Data 234
# dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-VAL-21206\OpenClinica\Current)"), recurse = F, regexp = ".sas7bdat$") |> 
#             path_filter(regexp = "Archive|Map|metadata|previous", invert = T, ignore.case = T)
```

```{r}
#| label: Import EDC data
edc_list <- edc_path |> 
            map(\(path) read_sas(path),.progress = T)
```

```{r}
#| label: Get names of EDC
names_of_edc <- str_extract(edc_path,"(?<=Current/)[:alnum:]+")
```

```{r}
#| label: Assign each tibble with names
names(edc_list) <- names_of_edc
```

```{r}
#| label: Wrangle AE
ae <- edc_list$ae1 |> 
      left_join(edc_list$ae2, join_by(Subject, `__STUDYEVENTREPEATKEY`)) |> 
      select(Subject,`__STUDYEVENTREPEATKEY`,starts_with("AE")) |> 
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle IE
ie <- edc_list$ie |> 
      select(Subject,starts_with("IE")) |> 
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle IE001
ie001 <- edc_list$ie001 |> 
         select(Subject,starts_with("IE")) |> 
         arrange(Subject) |> 
         sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle CAD2
cad2 <- edc_list$cad2 |> 
        select(Subject,starts_with("DS")) |> 
        arrange(Subject) |> 
        sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle CAD3
cad3 <- edc_list$cad3 |> 
        select(Subject,starts_with("DS")) |> 
        arrange(Subject) |> 
        sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle CM1 and CM2
cm <- edc_list$cm1 |>
       full_join(edc_list$cm2,by = join_by(Subject, `__STUDYEVENTREPEATKEY`)) |> 
       select(Subject,`__STUDYEVENTREPEATKEY`, starts_with("CM")) |> 
       arrange(Subject) |> 
       sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle DE
de <- edc_list$de |> 
      select(Subject,DEYN01:last_col()) |> 
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle DM
dm <- edc_list$dm |> 
      select(Subject, DMYN:last_col()) |> 
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle MH1
mh1 <- edc_list$mh1 |> 
       select(Subject, MHYN02:last_col()) |> 
       arrange(Subject) |> 
       sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle SK1 and SK2
sk <- edc_list$sk1 |> 
      full_join(edc_list$sk2, by = join_by(Subject, `__STUDYEVENTREPEATKEY`)) |> 
      select(Subject,`__STUDYEVENTREPEATKEY`, starts_with("PE")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle SA
sa <- edc_list$sa |> 
      select(Subject, starts_with("DU")) |> 
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle SR1 and SR2
sr <- edc_list$sr1 |> 
      full_join(edc_list$sr2, by = join_by(Subject, `__STUDYEVENTREPEATKEY`)) |> 
      select(Subject,`__STUDYEVENTREPEATKEY`, starts_with("DR")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle PD
pd <- edc_list$pd |> 
      select(Subject,DVYN:last_col()) |> 
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle CO
co <- edc_list$co |> 
      select(Subject, starts_with("CO")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle SE
se <- edc_list$se |> 
      select(Subject, starts_with("DS")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle UC
uc <- edc_list$uc |> 
      select(Subject, starts_with("UV")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle VS
vs <- edc_list$vs |> 
      select(Subject, starts_with("VS")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle DU1 and DU2
du <- edc_list$du1 |> 
      full_join(edc_list$du2, by = join_by(Subject, `__STUDYEVENTREPEATKEY`)) |> 
      select(Subject,`__STUDYEVENTREPEATKEY`, starts_with("UP")) |>
      arrange(Subject) |> 
      sjlabelled::label_to_colnames()
```

```{r}
#| label: Wrangle SSU1 and SSU2 and SSU3
ssu <- edc_list$ssu1 |> 
       full_join(edc_list$ssu2, by = join_by(Subject, `__STUDYEVENTREPEATKEY`)) |>
       full_join(edc_list$ssu3, by = join_by(Subject, `__STUDYEVENTREPEATKEY`)) |>
       select(Subject,`__STUDYEVENTREPEATKEY`, starts_with("SL")) |>
       arrange(Subject) |> 
       sjlabelled::label_to_colnames()
```

<!-- \\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-22225 Multi-Analyte Studies\Statistics\Programs\SE30\AL -->

```{r}
#| label: Create Directory
# output_directory <- str_c(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-22225 Multi-Analyte Studies\Statistics\Programs\SE30\AL)"),"/", 
#                            format(Sys.Date(), "%Y%m%d"))
# if (!dir_exists(output_directory)){
#     dir_create(output_directory)
# }
```

```{r}
#| label: Create Directory on M Drive
output_directory <- str_c(str_replace(edc_path[1],"OpenClinica.+","CDM_Reports"),"/",format(Sys.Date(),"%Y%m%d"))
if (!dir_exists(output_directory)){
    dir_create(output_directory)
}
```

```{r}
#| label: Excel Function
create_and_format_sheet <- function(wb, sheet_name, data, filename_prefix) {
  
  wb <- createWorkbook()
  addWorksheet(wb, sheet_name)
  # Generate the filename
  filename <- str_c(output_directory,"/",str_c(str_extract(edc_path[1], "(?<=(RES|PMS|VAL|EXP)-)[:digit:]+"), filename_prefix, Sys.getenv("USERNAME"), format(Sys.time(), "%Y%m%d_%H%M%S"), sep = "_"))
  
  if (nrow(data) != 0){
  
  writeData(wb, sheet_name, data, colNames = TRUE, rowNames = FALSE)
  setColWidths(wb, sheet_name, cols = 1:ncol(data), widths = "20")

  # Header Style
  header_style <- createStyle(fontName = "Arial", fontSize = 9.5,wrapText = TRUE, fgFill = "#EDF2F9", halign = "center", fontColour = "#112277", textDecoration = "bold", border = "TopBottomLeftRight", borderStyle = "thin")
  addStyle(wb, sheet_name, style = header_style, rows = 1, cols = 1:ncol(data))
  
  # Body Style
  body_style <- createStyle(fontName = "Arial", fontSize = 9.5, halign = "left", valign = "center", wrapText = TRUE, border = "TopBottomLeftRight", borderStyle = "thin")
  addStyle(wb, sheet_name, style = body_style, rows = 2:(nrow(data) + 1), cols = 1:ncol(data), gridExpand = TRUE)
  
  # Body Style Add Date format
  date_style <- createStyle(fontName = "Arial", fontSize = 9.5, halign = "left", valign = "center", wrapText = TRUE, border = "TopBottomLeftRight", borderStyle = "thin", numFmt = "ddmmmyyyy")
  addStyle(wb, sheet_name, style = date_style, rows = 2:(nrow(data) + 1), cols = 2:ncol(data), gridExpand = TRUE)
  
  # Add filters to the first row
  addFilter(wb, sheet_name, rows = 1, cols = 1:ncol(data))
  
  # Freeze the top row
  freezePane(wb, sheet_name, firstRow = TRUE)
  
  } else {
    
    if (filename_prefix == "Adverse_Event_Report"){
        df <- tibble(Notes = "There are no AEs for this study")
    } else if (filename_prefix == "Device_Incident_Report"){
        df <- tibble(Notes = "There are no DEs for this study")
    } else if (filename_prefix == "Protocol_Deviation_Report"){
      df <- tibble(Notes = "There are no PDs for this study")
    }
  
    writeData(wb, sheet_name, df, colNames = TRUE, rowNames = FALSE)
    setColWidths(wb, sheet_name, cols = 1, widths = "40")
    # Header Style
    addStyle(wb, sheet_name, style = createStyle(fontName = "Arial", fontSize = 9.5, wrapText = TRUE, fgFill = "#EDF2F9", halign = "center", fontColour = "#112277", textDecoration = "bold", border = "TopBottomLeftRight", borderStyle = "thin"), 
             rows = 1, cols = 1)
    # Body Style
    addStyle(wb, sheet_name, style = createStyle(fontName = "Arial", fontSize = 9.5, halign = "center", valign = "center", wrapText = TRUE, border = "TopBottomLeftRight", borderStyle = "thin"), rows = 2, cols = 1, gridExpand = TRUE)
  }
  
  saveWorkbook(wb, file = str_c(filename, ".xlsx"), overwrite = TRUE)
}
```

```{r}
#| label: For Loop to output AE DE PD
datasets <- list(ae = "Adverse_Event_Report", de = "Device_Incident_Report", pd = "Protocol_Deviation_Report")
sheet_names <- c("AdverseEvents", "DeviceIncidents", "ProtocolDeviation")

# Loop through the datasets and apply the function
for (i in seq_along(datasets)) {
  create_and_format_sheet(wb, sheet_names[i], get(names(datasets)[i]), datasets[[i]])
}
```

```{r}
#| label: Across CRF
#| include: false
filename <- str_c(output_directory,"/",str_c(str_extract(edc_path[1], "(?<=(RES|PMS|VAL|EXP)-)[:digit:]+"),"Comments_Across_CRF_Data", Sys.getenv("USERNAME"), format(Sys.time(), "%Y%m%d_%H%M%S"), sep = "_"))

wb <- createWorkbook()
sheet_names <- c("Index", "AdverseEvents", "Eligibility", "InformedConsent",
                 "ClinicVisit2","ClinicVisit3","Medications",
                 "Device_Incidents","Demography","Diabetes_History",
                 "SkinAssessment","SensorApplication","SensorRemoval",
                 "Protocol_Deviation","Comments","Study_Exit",
                 "Unscheduled_Contact","Vital_Signs","FinalDataUpload",
                 "StudySetup")  # Add more sheet names as needed
# Add each sheet name as a worksheet to the workbook
lapply(sheet_names, addWorksheet, wb = wb)

writeData(wb, "Index", tibble(Sheet = sheet_names[-1]))

data_list <- list(ae,ie,ie001,cad2,cad3,cm,de,dm,mh1,sk,sa,sr,pd,co,se,uc,vs,du,ssu)

# Write data to the sheets using a for loop
for (i in 1:length(data_list)) {
  writeData(wb, sheet = sheet_names[i + 1], data_list[[i]])
  
  setColWidths(wb, sheet_names[i + 1], cols = 1:ncol(data_list[[i]]), widths = "20")

  # Header Style
  header_style <- createStyle(fontName = "Arial",fontSize = 9.5,wrapText = TRUE, fgFill = "#EDF2F9", halign = "center", fontColour = "#112277", textDecoration = "bold", border = "TopBottomLeftRight", borderStyle = "thin")
  addStyle(wb, sheet_names[i + 1], style = header_style, rows = 1, cols = 1:ncol(data_list[[i]]))
  
  # Body Style
  body_style <- createStyle(fontName = "Arial", fontSize = 9.5, halign = "left", valign = "center", wrapText = TRUE, border = "TopBottomLeftRight", borderStyle = "thin")
  addStyle(wb, sheet_names[i + 1], style = body_style, rows = 2:(nrow(data_list[[i]]) + 1), cols = 1:ncol(data_list[[i]]), gridExpand = TRUE)
  
  # Body Style Add Date format
  date_style <- createStyle(fontName = "Arial", fontSize = 9.5, halign = "left", valign = "center", wrapText = TRUE, border = "TopBottomLeftRight", borderStyle = "thin", numFmt = "ddmmmyyyy")
  addStyle(wb, sheet_names[i + 1], style = date_style, rows = 2:(nrow(data_list[[i]]) + 1), cols = 2:ncol(data_list[[i]]), gridExpand = TRUE)
  
  # Add filters to the first row
  addFilter(wb, sheet_names[i + 1], rows = 1, cols = 1:ncol(data_list[[i]]))
  
  # Freeze the top row
  freezePane(wb, sheet_names[i + 1], firstRow = TRUE)
  
}

for (i in 2:length(sheet_names)) {
  link <- makeHyperlinkString(sheet = sheet_names[i], row = 1, col = 1, text = sheet_names[i])
  writeFormula(wb, sheet = "Index", startRow = i, startCol = 1, x = link)
}
showGridLines(wb, sheet = "Index", showGridLines = FALSE)
saveWorkbook(wb, file = str_c(filename, ".xlsx"), overwrite = TRUE)
```


<!-- Output \\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-22225\SE30_Glu\CDM_Reports -->
<!-- //wf00168p.oneabbott.com/data1/CDM/ADC-US-RES-22225/SE30_Glu/OpenClinica/Current/ae1.sas7bdat -->

```{r}
# str_c(str_replace(edc_path[1],"OpenClinica.+","CDM_Reports"),"/",format(Sys.Date(),"%Y%m%d"))
```
